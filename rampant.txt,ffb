PRINT "Assembling demo"DIM CODE 4096FOR I=0TO3STEP3P%=CODE[OPTI;**** main loop.main_loopstmfd r13!,{r14}bl setup_screen_buffers.do_itldr r7, colour_offsetadr r8, color_tube_tableadd r8,r8,r7add r7,r7,#4teq r7,#24moveq r7,#0str r7, colour_offsetmov r0, #250ldr r1,[r8],#4ldr r2,[r8],#4ldr r3,[r8],#4ldr r4,[r8],#4bl main_tube_loopldmfd r13!, {r15}teq r0,#12  ; escaped out?beq end_demob do_it.end_demoldmfd r13!,{r15}; below value is start colour offset.colour_offset equd 0;colour sprite tubes to use .color_tube_table equd &c8  ; blueequd &28  ; redequd &a0  ; yellowequd &50  ; greenequd &00  ; browny-redequd &00  ; browny-redequd &78  ; purpleequd &c8  ; blueequd &28  ; redequd &28equd &00equd &c8equd &c8equd &c8equd &50equd &50equd &28equd &00equd &78equd &a0equd &78equd &50equd &78equd &00equd &00equd &00equd &78equd &50equd &c8equd &28equd &00equd &28; number of blank lines to draw at top and bottom.blank_lines_count equd &76 .variable_4d50 equd 1.variable_4d58 equd 4   ; SRG USUALLY 0.   tube effect number.variable_4d5c equd 0; *********** setup the screen buffers **********.setup_screen_buffersstmfd r13!,{r14}mov r0, #22swi "OS_WriteC"   ; write a charactermov r0, #13swi "OS_WriteC"   ; write a characterswi "OS_RemoveCursors"mov r0, #112mov r1, #2swi "OS_Byte"    ; switch to second screen buffermov r0, #12swi "OS_WriteC"  ; write a charactermov r0, #112mov r1, #1swi "OS_Byte"    ; switch to first screen buffer; bl function_at_5184 ; SRG setup font maskldr r1, variable_5068ldr r2, [r1], #8str r2, variable_506cstr r1, variable_5068ldmfd r13!, {r15}.srgtemp equd 2000; *********** main_tube_loop **********.main_tube_loop   stmfd r13!, {r14}str r0, variable_4d5cstr r1, offset_tube1_spritestr r2, offset_tube2_spritestr r3, offset_tube3_spritestr r4, offset_tube4_spritemov r10, #0str r10, variable_5008mov r0, #0str r0, variable_500cldr r1, variable_5064 ; screen memorystr r1, variable_5060mov r0, #4str r0, variable_5180mov r1, #5str r1, variable_4d50ldr r2, variable_4d58ldr r1, tube_spritescmp r2, #4movge r3, #0strge r3, blank_lines_countmovge r3, #118strge r3, variable_4d50; setup which tube sprites to usecmp r2, #2addlt r1, r1, #200str r1,layer1_tube_sprite_to_useaddge r1, r1, #40str r1, layer2_tube_sprite_to_useaddge r1, r1, #80str r1, layer3_tube_sprite_to_useaddge r1, r1, #40str r1, layer4_tube_sprite_to_usecmp r2, #4; blt draw_tube_effect_loop SRGldr r3, tube_spritesldr r1, offset_tube1_spriteadd r1,r1,r3str r1, layer1_tube_sprite_to_useldr r1, offset_tube2_spriteadd r1,r1,r3str r1, layer2_tube_sprite_to_useldr r1, offset_tube3_spriteadd r1,r1,r3str r1, layer3_tube_sprite_to_useldr r1, offset_tube4_spriteadd r1,r1,r3str r1, layer4_tube_sprite_to_use.draw_tube_effect_loopbl draw_all_4_layer_tubes_into_buffer ;4e6cbl make_4buffer ; 4e70bl draw_tubes ; 4e74bl update_draw_text_valuesldr r1, variable_500ccmp r1, #16;blge draw_text  ; SRGldr r1, tube_table_offset   ; tube tables offsetadd r1, r1, #1teq r1, #360moveq r1, #0str r1, tube_table_offset; bl switch_screen_buffer   ; srk DOED NOT WORK; wait for vsyncmov r0, #19swi "OS_Byte";check for escape keymov r0, #129mvn r1, #112mov r2, #255swi "OS_Byte"teq r1, #255beq escape_out_main_tube_4fe0ldr r1,srgtempsubs r1,r1,#1str r1,srgtempteq r1,#0beq escape_out_main_tube_4fe0b draw_tube_effect_loopldr r1, variable_4d5cldr r2, variable_5008teq r1, r2beq pc4f14ldr r1, screen_offset ; are we on first screen ?teq r1,#0beq pc4ef0ldr r1, variable_500cldr r3, variable_4d50cmp r1, #224 ; e0subge r3,r3,#1str r3, variable_4d50.pc4ef0ldr r1, variable_5008cmp r1, #1040blt draw_tube_effect_loopldr r1, blank_lines_countcmp r1 ,#112addlt r1,r1,#2bge pc4f14str r1, blank_lines_countb draw_tube_effect_loop.pc4f14.escape_out_main_tube_4fe0mov r0,#12  ; tell caller we escaped out ldmfd r13!, {r15}.layer1_tube_sprite_to_use equd 0  .layer2_tube_sprite_to_use equd 0  .layer3_tube_sprite_to_use equd 0  .layer4_tube_sprite_to_use equd 0  .offset_tube1_sprite equd &09 .offset_tube2_sprite equd 0 .offset_tube3_sprite equd 0 .offset_tube4_sprite equd 0 .variable_5008 equd &0.variable_500c equd &ff; *********** function 5010 **********; i have absolutely no idea what this trying to achieve; maybe control varibale to draw text  on screen?.update_draw_text_values  ;5010ldr r1, variable_5008add r1,r1,#1str r1, variable_5008cmp r1,#&100ldrge r2, variable_500caddge r2,r2,#1strge r2, variable_500cteq r1,#&230moveq r3,#0streq r3, variable_500cmoveq r3,#1streq r3, variable_4d50ldreq r3, variable_5068ldreq r4, [r3,#-4]streq r4, variable_5068ldreq r3, variable_5068ldreq r4, [r3],#8streq r3, variable_5068streq r4, variable_506cmov r15,r14.variable_5060 equd &1fb2618  .variable_5064 equd &1fb2618 ; screen memory.variable_5068 equd &00052000 ; whats this?.variable_506c equd &0;*********************************************************; something to do with text drawing.draw_text  ; 5070stmfd r13!, {r14}ldr r6,variable_4d50ldr r9, variable_5748  ; fontldr r11, variable_5060 ; screenldr r1, variable_500c  ; draw text control variablecmp r1, #320  ; no used ?cmp r1, #224addge r11,r11,#320strge r11, variable_5060cmp r6, #0ldmlefd r13!, {r15}; ...; ... a load of draw text code; ... .pc5160ldmfd r13!, {r15}.variable_5180 equd 4;*********************************************************; setting up stuff function called at start; this seems to be making a mask version of some sprite; output store back at 5748 after this call will be:; 8 pixels sprite then ; 8 pixels mask; and so on....function_at_5184; basically copy values pointed at r12-r11 to address 50000 (temp buffer)ldr r12, variable_5748ldr r11, variable_5744sub r10, r11, r12mov r6, r10mov r9, #&50000.loop_5198ldmia r12!,{r0,r1}stmia r9!,{r0,r1}subs r10, r10, #8bne loop_5198; Now copy back to r12 (5748) but make alternative (every 8 pixels) sprite/mask versionldr r12, variable_5748mov r10, r6mov r11, #&50000 ; mov r2, #255mov r3, #0.loop_51bcldmia r11, {r5, r6}stmia r12!, {r5, r6}mov r7, #8.loop_51c8ldrb r1, [r11], #1teq r1, #0streqb r2, [r12], #1strneb r3, [r12], #1subs r7, r7, #1bne loop_51c8subs r10, r10, #8bne loop_51bcmov r15, r14.screen_offset equd 0 ; 51ec.variable_51f0 equd &5000;***********************************************.switch_screen_bufferldr r12, screen_offsetmov r2, #0mvn r1, #0teq r12, #0moveq r12, #&14000moveq r0, #0movne r12, #0ldrne r0, variable_51f0 ; str r12, screen_offsetswi "OS_UpdateMEMC"mov r15,r14.tube_table_offset equd 1.start_tube_buffer_address equd &1fd8000 .variable_5228 equd 0.variable_522c equd &01fd8780.screen_5230 equd &01fb0500 .current_layer1_draw_tube_offset equd &8c   .current_layer2_draw_tube_offset equd &8c.current_layer3_draw_tube_offset equd &8c .current_layer4_draw_tube_offset equd &8c.tube_offset_tables_to_use equd &579d4.tube_offset_tables2 equd &579d4.tube_offset_tables1 equd &56354.tube_offset_table_index equd 0.tube_offset_table_size equd &168   ; (USUALLY &140) 5254  560 values although each table 1440 apart; *****************************************************; draw 4 layer tubes into first buffer.draw_all_4_layer_tubes_into_bufferldr r1, tube_offset_table_sizeldr r7, tube_offset_table_indexadd r7,r7,#1teq r7, r1moveq r7, #0str r7, tube_offset_table_indexldr r6, tube_offset_tables_to_useldr r12, current_layer1_draw_tube_offsetldr r9, start_tube_buffer_addressldr r8, layer1_tube_sprite_to_use; draw 8 background tubes (layer 1)mov r3,#8.draw_all_background_tubes_loopmov r10, #40mov r11,r8; draw a tube into buffer.draw_background_tube_loopldrb r1,[r11],#1strb r1, [r9,r12]add r12, r12, #1teq r12, #320moveq r12, #0subs r10, r10, #1bne draw_background_tube_loopsubs r3, r3, #1bne draw_all_background_tubes_loop; update next layer 1 offset draw valueldr r1, [r6, r7, lsl #2]str r1, current_layer1_draw_tube_offset;move to next table (*after* update layer 1)add r6, r6, #1440; draw 6 layer2 tubesldr r8, layer2_tube_sprite_to_useldr r12, current_layer2_draw_tube_offsetldr r9, start_tube_buffer_addressmov r3,#6.draw_all_layer2_tubes_loopmov r10,#40mov r11,r8.draw_layer2_tube_loopldrb r1, [r11], #1strb r1, [r9, r12]add r12, r12, #1teq r12, #320moveq r12, #0subs r10, r10, #1bne draw_layer2_tube_loopadd r12,r12,#13cmp r12,#320subge r12,r12,#320subs r3,r3,#1bne draw_all_layer2_tubes_loop; update next layer 2 offset draw value; note table already been moved forward (see above)ldr r1, [r6, r7, lsl #2]; clamp it to 1 screencmp r1, #320subge r1, r1, #320cmp r1, #0addlt r1, r1, #320str r1, current_layer2_draw_tube_offset; draw 4 layer3 tubesldr r8, layer3_tube_sprite_to_useldr r12, current_layer3_draw_tube_offsetldr r9, start_tube_buffer_addressmov r3, #4.draw_all_layer3_tubes_loopmov r10, #40mov r11, r8.draw_layer3_tube_loopldrb r1, [r11], #1strb r1, [r9, r12]add r12, r12, #1teq r12, #320moveq r12, #0subs r10, r10, #1bne draw_layer3_tube_loopadd r12, r12, #40cmp r12, #320subge r12, r12, #320subs r3, r3, #1bne draw_all_layer3_tubes_loop;move to next table (*before* updating offset)add r6, r6, #1440; update next layer 3 offset draw valueldr r1, [r6, r7, lsl #2]cmp r1, #320subge r1, r1, #320cmp r1, #0addlt r1, r1, #320str r1,current_layer3_draw_tube_offset; draw 2 layer 4 tubesldr r8, layer4_tube_sprite_to_useldr r12, current_layer4_draw_tube_offsetldr r9, start_tube_buffer_addressmov r3, #2.draw_all_layer4_tubes_loopmov r10, #40mov r11, r8.draw_layer4_tube_loopldrb r1, [r11], #1strb r1, [r9, r12]add r12, r12, #1teq r12, #320moveq r12, #0subs r10, r10, #1bne draw_layer4_tube_loopadd r12, r12, #80cmp r12, #320subge r12, r12, #320subs r3, r3, #1bne draw_all_layer4_tubes_loop;move to next table (*before* updating offset)add r6, r6, #1440; update next layer 4 offset draw valueldr r1, [r6, r7, lsl #2]cmp r1, #320subge r1, r1, #320cmp r1, #0addlt r1, r1, #320cmp r1, #320 ; copy/paste error or values bigger than 640?subge r1, r1, #320str r1, current_layer4_draw_tube_offsetmov r15, r14; *****************************************************; make 4 copies of buffer 1 byte/pixel shifted for each copy; each buffer is 640 pixels wide, but duplicates every 320 pixels.make_4bufferstmfd r13!, {r14}ldr r12, start_tube_buffer_address;duplicate first 320 pixels of bufferadd r11, r12, #320ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}ldr r12, start_tube_buffer_addressadd r11,r12,#640; make other 3 buffers 1 pixel shifted each time; 640 * 3 = 1920;; We do 40 pixels at a time so need to do this loop 48 timesmov r10, #48.make_other_3_buffers_pixel_shiftedldmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}mov r0,r0,lsr #8orr r0,r0,r1, lsl #24mov r1,r1,lsr #8orr r1, r1, r2, lsl #24mov r2,r2,lsr #8orr r2, r2, r3, lsl #24mov r3,r3,lsr #8orr r3, r3, r4, lsl #24mov r4,r4,lsr #8orr r4, r4, r5, lsl #24mov r5,r5,lsr #8orr r5, r5, r6, lsl #24mov r6,r6,lsr #8orr r6, r6, r7, lsl #24mov r7,r7,lsr #8orr r7, r7, r8, lsl #24mov r8,r8,lsr #8orr r8, r8, r9, lsl #24mov r9,r9,lsr #8ldr r14, [r12]orr r9, r9, r14, lsl #24stmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9}subs r10, r10, #1bne make_other_3_buffers_pixel_shiftedldmfd r13!, {r15}; 59054 still 1; 5A134 move 1; 5b214 move 2; 5c2f4 sill2; 5d3d4 move3.tube_table_to_use1 equd &0005b214       .tube_table_to_use2 equd &0005d3d4       .tube_table_to_use_index1 equd &00000000 .tube_table_to_use_index2  equd &00000000 ; *****************************************************; ***draw tubes down start   ***; *****************************************************.draw_tubesstmfd r13!, {r14}ldr r1, blank_lines_countcmp r1, #4;bgt draw_tubes_full_screen_with_blank_parts  ; removed as just duplicate code reallyldr r11, start_tube_buffer_addressldr r1, screen_offsetldr r12, screen_5230add r12,r12,r1; basically copy paste from below?ldr r14, tube_table_to_use1ldr r10, tube_table_to_use_index1add r14,r14,r10ldr r9, tube_table_to_use2ldr r10,tube_table_to_use_index2add r9,r9,r10mov r10,#240add r12,r12,#1280.draw_tube_line_loopldr r11, start_tube_buffer_addressldr r0,[r14],#4add r11,r11,r0ldr r0,[r9],#8add r11,r11,r0movs r1,r11,asr#1addcs r11, r11, #640movs r1,r1,asr#1addcs r11, r11, #1280;draw whole lineldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7, r8}ldmia r11!, {r0, r1, r2, r3, r4, r5, r6, r7}stmia r12!, {r0, r1, r2, r3, r4, r5, r6, r7}subs r10, r10, #1bne draw_tube_line_loopldr r0, tube_table_to_use_index1add r0,r0,#8str r0, tube_table_to_use_index1ldr r3, tube_table_to_use_index2add r3, r3, #4str r3, tube_table_to_use_index2ldr r1, tube_table_offset ; finished tube tables?, then reset themteq r1, #0subeq r3,r3, #1440subeq r0,r0, #2880streq r0, tube_table_to_use_index1streq r3, tube_table_to_use_index2ldmfd r13!, {r15}.variable_5744 equd &54b54 ; end of font sprites ?.variable_5748 equd &53354 ; start of font sprites?.tube_sprites equd &53264 ; ? start of tubes sprites.variable_5750 equd &53208 ; ?]NEXT I*HOSTFS*UP*DIR Rampant*RMLOAD MemAlloc*SCREENSIZE 320KREM 56354 + 1680*LOAD "BUFFER_SIN" 56354REM 579d4 + 1680*LOAD "BUFFER_SIN2" 579D4REM 53264 + F0*LOAD "TUBE_SPR" 53264REM 59054 TO 5F5E4   ; *LOAD "SIN_DOWN" 59054MODE 13CALL main_loop